//ll creation

#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    // 1. Function to search for an element in the linked list
    bool searchElement(int key) {
        Node* current = head;
        while (current != nullptr) {
            if (current->data == key) {
                return true;
            }
            current = current->next;
        }
        return false;
    }

    // 2. Function to display the elements in the linked list
    void display() {
        Node* current = head;
        while (current != nullptr) {
             cout << current->data << " ";
            current = current->next;
        }
         cout <<  endl;
    }

    // 3. Insertion at the beginning of the list
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    // 4. Insertion at the end of the list
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // 5. Insertion after a specific value in the list
    void insertAfterValue(int existingValue, int newValue) {
        Node* newNode = new Node(newValue);
        Node* current = head;

        if (head == nullptr) {
            head = newNode;
            return;
        }

        while (current != nullptr && current->data != existingValue) {
            current = current->next;
        }

        if (current == nullptr) {
             cout << "Value not found. Node not inserted." <<  endl;
        } else {
            newNode->next = current->next;
            current->next = newNode;
        }
    }

    // 6. Insertion after a specific position in the list
    void insertAtPosition(int value, int position) {
        if (position < 0) {
             cout << "Invalid position." <<  endl;
            return;
        }

        Node* newNode = new Node(value);

        if (position == 0) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* current = head;
            int currentPosition = 0;

            while (current != nullptr && currentPosition < position - 1) {
                current = current->next;
                currentPosition++;
            }

            if (current == nullptr) {
                 cout << "Position out of range." <<  endl;
                return;
            }

            newNode->next = current->next;
            current->next = newNode;
        }
    }

    // 7. Delete from the beginning of the list
    void deleteAtBeginning() {
        if (head == nullptr) {
             cout << "Linked list is empty. Nothing to delete." <<  endl;
        } else {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    // 8. Delete from the end of the list
    void deleteAtEnd() {
        if (head == nullptr) {
             cout << "Linked list is empty. Nothing to delete." <<  endl;
        } else if (head->next == nullptr) {
            delete head;
            head = nullptr;
        } else {
            Node* current = head;
            while (current->next->next != nullptr) {
                current = current->next;
            }
            delete current->next;
            current->next = nullptr;
        }
    }

    // 9. Delete a specific node from the list
    void deleteNodeWithValue(int value) {
        if (head == nullptr) {
             cout << "List is Empty." <<  endl;
            return;
        }

        Node* temp = head;
        Node* pre = nullptr;

        while (temp != nullptr && temp->data != value) {
            pre = temp;
            temp = temp->next;
        }

        if (temp == nullptr) {
             cout << "Element not found." <<  endl;
            return;
        }

        if (temp == head) {
            head = head->next;
        } else if (temp->next == nullptr) {
            pre->next = nullptr;
        } else {
            pre->next = temp->next;
        }

        delete temp;
    }

    // 10. Delete a specific position from the list
    void deleteAtPosition(int position) {
        if (position < 0) {
             cout << "Invalid position." <<  endl;
            return;
        }

        if (head == nullptr) {
             cout << "Linked list is empty. Nothing to delete." <<  endl;
            return;
        }

        if (position == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
        } else {
            Node* current = head;
            int currentPosition = 0;

            while (current != nullptr && currentPosition < position - 1) {
                current = current->next;
                currentPosition++;
            }

            if (current == nullptr || current->next == nullptr) {
                 cout << "Position out of range." <<  endl;
                return;
            }

            Node* temp = current->next;
            current->next = current->next->next;
            delete temp;
        }
    }
};

int main() {
    // Example usage of the linked list
    LinkedList myList;

    myList.insertAtEnd(1);
    myList.insertAtEnd(2);
    myList.insertAtEnd(3);

    myList.display();

    myList.insertAtBeginning(0);

    myList.display();

    myList.insertAfterValue(2, 5);

    myList.display();

    myList.deleteAtPosition(2);

    myList.display();

    return 0;
}
